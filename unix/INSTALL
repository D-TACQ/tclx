EXTENDED TCL SOURCE DIRECTORY HIERARCHY
=======================================

Building the Extended Tcl requires access to built Tcl and Tk source
directories.  Their location relative to the tclX7.0a* directory must be
configured by editing tclX7.0a*/Config.mk.  The default is to place tclX7.0a*
in a directory parallel to the Tcl and Tk distributions:

                   tcl7.0      tk3.3      tclX7.0a


The following directories are included under the tclX7.0a* directory:

    o man - Unformatted manual pages for TclX.

    o src - The main source for TclX.

    o osSupport - Library routines required by TclX that may not be available
      on all Unix versions.

    o tclsrc - Tcl source that is built into the standard Tcl package library.
      The makefile also handles generation of help files and copying man files
      into the master directory

    o tclmaster - Tcl master directory.  All files required to run TclX
      are built or copied into this directory.  The entire contents of
      this directory are installed.

    o tests - Tests for TclX.

    o tksrc - A makefile that builds a version of the Tk wish shell containing
      Extended Tcl.

    o tktclsrc - Tcl source that is built into the standard Tk package library.
      The makefile also handles generation of help files and copying man files
      into the master directory

    o tkmaster - Tk master directory.  All files required to run Tk
      are built or copied into this directory.  The entire contents of
      this directory are installed.

    o tktests - Files used to test wishx.

    o experimental - A directory of experimental and contributed Tcl source.
      The code is not normally built as part of TclX.

    o tools - Tools used for building and installing TclX.

THE EXTENDED TCL INSTALLATION MODELS
====================================



HOW TO BUILD EXTENDED TCL
=========================

    o Configure and compile Tcl 7.0 following the instructions that come with
      Tcl.  You do not need to install it.

    o If you are going to be using Tk and want to build an Extended Tcl wish
      shell (wishx), configure and compile Tk 3.3.  You do not need to install
      it.

    o Enter ./configure to run the configure script.  The following options are
      recognized by the TclX configure script:
 
        o --srcdir=DIR
          If you are using a make that supports VPATH (e.g. GNU make) you can
          use this to compile in a separate directory from the source.
          Note: The source directory must be clean, it can't contain a built
          copy of TclX.

    o Edit Config.mk in the build directory following the instructions in the
      file.  If the --srcdir option to configure is used, it is copied from
      the source directory to the build directory.  This file is used to
      specify values that can't be figured out by the configure script.  This
      includes the location of the Tcl and Tk distributions.  It's also used
      to specify the sections that the Tcl manual pages are to be installed
      in.

    o Note that the site specific installation options should be set in
      Config.mk before compiling.  It is especially important to set the value
      for TCL_MASTERDIR and TK_MASTERDIR in Config.mk before compiling TclX.
      See the section on "Installing Extended Tcl" for more details.

    o Config.mk can be used to override several values that configure might
      have gotten wrong or that you desire to be change (like gcc vs cc).

    o Now do a "make".  If all goes well, this will build an extended
      "libtclx.a" and the "tcl" executable in the tclmaster directory.  If Tk
      is requested, an extended "libtkx.a" and "wishx" executable will be
      built in the tkmaster directory.

    o Note that a fair amount of time is spent moving manual pages to the
      master directories.  If you need to rebuild while debugging problems,
      "make partclean" will removed everything but the manual pages and
      Tk demo files.  This should make subsequent makes go much faster.

    o Until the Extended Tcl runtime files are installed, "tcl" and "wishx"
      can't be run directly.  To run them before installation, use "runtcl" or
      "runwishx".

    o Extended Tcl comes with help pages that are built from the Tcl 7.0 and
      Tk 3.3 manual pages as well as the TclX manual page.  If you are building
      TclX with a later version of Tcl or Tk, you might want to rebuild these
      manual pages.  If new manual pages have been added, you can add them
      by editing the files "tools/tclmanpages" and "tools/tkmanpages".
      You must have nroff and the man macro package installed on your system
      to build the manual pages.  Enter "make buildtclhelp" to build the
      Tcl and TclX help pages and "make buildtkhelp" to build the Tk manual
      pages or "make buildhelp" to build both.


   We have a limited number of systems available to test Extended Tcl on,
we need your help in supporting TclX on a wide range of platforms.  The nature
of the functionality TclX supports mean a great deal of system dependent code.
Thanks to all of those who have submitted configuration files and changes to
TclX.

TESTING EXTENDED TCL
====================

   There are three sets of tests: the tests for Berkeley Tcl, the tests for
Tk and the tests for Extended Tcl, which test both the new commands added by
Extended Tcl and the procedures defined in the Extended Tcl procedure
library.

    o Run both the Berkeley and TclX tests by typing "make test" in the
      tclX7.0a directory.  The tests require a tcl shell with added commands
      (tcltest in the tcl7.0 distribution).  Because the Extended TCL shell
      (tcl) does not have these commands, the following tests will not run:

	cmdinfo.test
	dcall.test
	link.test

    o To run the Tk tests with wishx, type "make tktest".  The tests require
      a tcl shell with added commands (tcltest in the tcl7.0 distribution).
      Because the Extended TCL shell (tcl) does not have these commands, the
      following tests will not run:

	raise.test

    o The Extended Tcl tests may be run by themselves with "make extdtests".

    o If a test fails, please dig into the test and the C source for the
      function being tested, fix the bug and mail us the change.  If you're
      not inclined to do this, please report the problem, including the output
      of the test, to tcl-project@neosoft.com.  Sometimes tests fail due to
      problems in the system environment or bugs in that test rather than
      problems with TclX.  Even if a few of the tests fail, you probably still
      have a working TclX.  See the "Porting Notes" section of this document
      for problems we have encountered.

    o If you're having trouble with the Berkeley tests, and you suspect that
      the extensions might be involved, you can build a special minimal
      version of Berkeley Tcl by cd'ing to the tcl7.0 directory and doing
      a "make test".  Similarly, you can do "make test" in the tk3.3 directory.

INSTALLING EXTENDED TCL
=======================

   TclX builds two master directories to hold all of the pieces of TclX that
need to be installed.  The master directory includes all of the run-time
library files, plus the executables and all other installed files.  This allows
for easy NFS sharing on heterogeneous networks and moving built TclX to new
machines.  The hierarchies are:

   o tclmaster - Contains Tcl code libraries and support files needed to run
     TclX.

     o bin - Contains the TclX shell.

     o help - Contains the help pages for Tcl & TclX.  This directory is
       shipped pre-built, but can be rebuilt if necessary.

     o include - Contains the Tcl and TclX exported include files.

     o lib - Contains the TclX library (libtclx.a).

     o man - Contains the Tcl and TclX manual pages.

   o tkmaster - Contains Tk code libraries and files needed to run wishx and
     Tk applications built with Extended Tcl.

     o bin - Contains the wishx shell and tclhelp.

     o demos - Contains the Tk demos.

     o help - Contains the help pages for Tk.  This directory is shipped
       pre-built, but can be rebuilt if necessary.

     o include - Contains the Tk exported include files.

     o lib - Contains the Tk library with Extended Tcl (libtkx.a).

     o man - Contains the Tk manual pages.

   The files built in the tclmaster and tkmaster directories must be installed
in the directory specified at configuration time.

   The installed tclmaster directory path is formed from the value of
TCL_MASTERDIR define in Config.mk and the Tcl version number and TclX version
suffix.  The default path would be /usr/local/tclX/7.0a.

   The installed tkmaster directory path is formed from the value of
TK_MASTERDIR define in Config.mk and the Tk version number and TclX version
suffix.  The default path would be /usr/local/tkX/3.3a.

  Symbolic links are built from the standard locations that external files
are installed as in the master directory, for example:

    ln -s /usr/local/bin/tcl /usr/local/tclX/7.0a/bin/tcl
    ln -s /usr/local/bin/wishx /usr/local/tkX/3.3a/bin/wishx

Install the Extended Tcl master directories by typing the command:

    make install


PORTING NOTES
=============


General:
   o Flock tests hanging:  Problems have been encountered on some Sun
     systems with the flock tests.  This might occur on other systems as
     well.  These are probably due to an incorrectly configured NFS lockd.
     The tests have been modified to try and report problems rather than
     hang.  It might hang anyway, in this case, rename tests/flock.test to
     tests/flock.bad to prevent them from being run.  If anyone can gives
     any clues into what is going on, we would love to detect this.

DEC Ultrix:
   o Several tests fail when Tcl is run on an NFS mounted file system.

SUN:
   o Seen not on flock tests hanging under the "general" section.

SCO:
   o SCO Unix systems have a "ranlib" command that is used for Xenix cross-
     development.  Pre-ODT 3.0 development systems, the command returns
     an error if used on COFF files.  Many developers rename the command
     to "xranlib" if they are not doing cross development.  Later versions
     of the command return a warning if used on COFF binaries.

SGI:
   o The strftime function appears to not work correctly on SGI (tested on
     IRIX 4.0.5). The fmtclock command specifying the GMT argument (perhaps
     only during daylight) returns a formated time that is one hour off.  This
     causes the following clock tests to fail:

        clock-3.2
        clock-4.0
        clock-4.1
     
     If this is a problem, add the following macro to your Config.mk:
 
         LIBOBJS=strftime.o

     This will cause a functioning (but not internationalized) strftime
     to be built and added to 
