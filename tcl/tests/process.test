#
# process.test
#
# Tests for the fork, execl and  wait commands.
#---------------------------------------------------------------------------
# Copyright 1992 Karl Lehenbauer and Mark Diekhans.
#
# Permission to use, copy, modify, and distribute this software and its
# documentation for any purpose and without fee is hereby granted, provided
# that the above copyright notice appear in all copies.  Karl Lehenbauer and
# Mark Diekhans make no representations about the suitability of this
# software for any purpose.  It is provided "as is" without express or
# implied warranty.
#------------------------------------------------------------------------------
# $Id$
#------------------------------------------------------------------------------
#

if {[info procs test] != "test"} then {source testlib.tcl}

# Proc to fork and exec child that loops until it gets a signal.

proc ForkLoopingChild {{setPGroup 0}} {
    flush stdout
    flush stderr
    set newPid [fork]
    if {$newPid != 0} {
        return $newPid
    }
    if $setPGroup {
        id process group set
    }
    execl ../tcl {-qc {catch {while {1} {sleep 1}}; exit 10}}
    error "Should never make it here"
}


# Test fork, execl, and wait commands.

test process-1.1 {fork, execl, wait tests} {
    set newPid [fork]
    if {$newPid == 0} {
        execl ../tcl {-qc {sleep 1;exit 12}}
        error "Should never make it here"
    }
    lrange [wait $newPid] 1 end
} {EXIT 12}

test process-1.2 {fork, execl, wait tests} {
    set newPid [ForkLoopingChild]
    sleep 1

    kill $newPid
    lrange [wait $newPid] 1 end
} {SIG SIGTERM}

test process-1.3 {fork, execl, wait tests} {
    set newPid1 [ForkLoopingChild]
    set newPid2 [ForkLoopingChild]
    sleep 3

    kill [list $newPid1 $newPid2]

    set got [list [wait $newPid1] [wait $newPid2]]
    set expect [list "$newPid1 SIG SIGTERM" "$newPid2 SIG SIGTERM"]
    if {$got == $expect} {
        set result OK
    } else {
        set result "Got: `$got', Expect: `$expect'"
    }
} {OK}

test process-1.4 {fork, execl, wait tests} {
    list [catch {fork foo} msg] $msg
} {1 {wrong # args: fork}}

test process-1.5 {fork, execl, wait tests} {
    list [catch {wait baz} msg] $msg
} {1 {expected integer but got "baz"}}


test process-1.6 {fork, execl, wait tests} {
    set testPid [ForkLoopingChild]
    kill $testPid
    set result [wait]
    lrange $result 1 end
} {SIG SIGTERM}

# Test extended wait functionality, if available.

catch {wait -nohang 1} result
if [string match "*options are not available on this system" $result] return

test process-2.1 {fork, execl, wait tests} {
    set testPid [ForkLoopingChild]
    set result1 [wait -nohang $testPid]
    kill $testPid
    set result2 [wait $testPid]
    list $result1 [lrange $result2 1 end]
} {{} {SIG SIGTERM}}

test process-2.2 {fork, execl, wait tests} {
    set testPid [ForkLoopingChild 1]
    set result1 [wait -nohang -pgroup $testPid]
    kill $testPid
    set result2 [wait -pgroup $testPid]
    list $result1 [lrange $result2 1 end]
} {{} {SIG SIGTERM}}

test process-2.3 {fork, execl, wait tests} {
    set testPid [ForkLoopingChild]
    set result1 [wait -nohang -pgroup -untraced $testPid]
    kill $testPid
    set result2 [wait -pgroup -untraced $testPid]
    list $result1 [lrange $result2 1 end]
} {{} {SIG SIGTERM}}


