.\"
.\" TclXInit.3
.\"
.\" Extended Tcl initialization functions.
.\"----------------------------------------------------------------------------
.\" Copyright 1992-1996 Karl Lehenbauer and Mark Diekhans.
.\"
.\" Permission to use, copy, modify, and distribute this software and its
.\" documentation for any purpose and without fee is hereby granted, provided
.\" that the above copyright notice appear in all copies.  Karl Lehenbauer and
.\" Mark Diekhans make no representations about the suitability of this
.\" software for any purpose.  It is provided "as is" without express or
.\" implied warranty.
.\"----------------------------------------------------------------------------
.\" $Id: TclXInit.3,v 5.4 1996/02/16 07:51:09 markd Exp $
.\"----------------------------------------------------------------------------
.\"
.TH "TclXInit" TCL "" "Tcl"
.ad b
.SH NAME
Tclx_Init, Tclxcmd_Init, TclX_Main, Tkx_Init, TkX_Main - Extended Tcl initialization.
'
.SH SYNOPSIS
.nf
.ft CW
-ltclx -ltcl

#include "tclExtend.h"

extern char *tclAppName;
extern char *tclAppLongname;
extern char *tclAppVersion;
extern int   tclAppPatchlevel;

int
Tclx_Init (Tcl_Interp *interp);

int
Tclxcmd_Init (Tcl_Interp *interp);

int
void
TclX_Main (int               argc,
           char            **argv,
           Tcl_AppInitProc  *appInitProc);

int
Tkx_Init (Tcl_Interp *interp);

void
TkX_Main (int               argc,
          char            **argv,
          Tcl_AppInitProc  *appInitProc);

.ft R
.fi
.SH DESCRIPTION
These functions are used to initialize Extended Tcl and applications based
on Extended Tcl.  This manual page also discusses various issues and approaches
of integrating TclX into other applications.
'
.SS tclAppName
The application name to be returned by the \fBinfox\fR
command. This should be a short mnemonic.  This value maybe altered from
the default by the application.
'
.SS tclAppLongname
The application long name to be returned by the \fBinfox\fR command.
This should be a natural language string.  This value maybe altered from
the default by the application.
'
.SS tclAppVersion
The application version string to be returned by the \fBinfox\fR command.
procedures are called.  This value maybe altered from
the default by the application.
'
.SS tclAppPatchlevel
The application patchlevel to be returned by the \fBinfox\fR command.
procedures are called.  This value maybe altered from
the default by the application.
'
.SS tclX_library
The path to the TclX runtime library.
This directory contains the initialization file evaluated by TclX_Init and is
also appended to auto_path.
This variable is initialized to the compile-time specified install location.
The value maybe modified before TclX_Init or TclXLib_Init are called to
use another library in a particular application.
If its set to NULL, no library will be used unless override by tclX_libraryEnv.
Setting tclX_libraryEnv and this variable to NULL causes no library directory
or initialization file to be used.
'
.SS tclX_libraryEnv
Environment variable used to override the path stored in tclX_library.
The value maybe modified before TclX_Init or TclXLib_Init are called to
use another environment variable for a particular application.
If its set to NULL, no environment variable will allow to override.
Defaults to "TCL_LIBRARY".
'
.SS tclX_initFile
The initialization file for TclX_Init to source.
By default the file "TclInit.tcl" in the TclX library directory is sourced.
If set to an absolute path, it is not assumed to be in the TclX library
directory and is independent of a library path being specified.
If set to NULL, not initialization file is evaluated.
'
.SS "Tclx_Init"
.PP
Initializes Extended Tcl, adding the extended command set to the interpreter.
This is called from \fBTcl_AppInit\fR.  This function must be called after
the \fBTcl_Init\fR function.  In addition to the standard command set, it
enables use of tlib packages libraries and makes the standard TclX library
available.

.PP
Parameters
.RS 2
\fBo \fIinterp\fR - A pointer to the interpreter to add the commands to.
.RE
.PP
Returns:
.RS 2
\fBTCL_OK\fR if all is ok, \fBTCL_ERROR\fR if an error occurred.
.RE
'
.SS "Tclxcmd_Init"
.PP
Add the TclX command set to the interpreter, with the exception of the
TclX library management commands.  This is normally called by
\fBTclx_Init\fR and should only be used if you don't want the TclX library
handling.
.PP
Parameters
.RS 2
\fBo \fIinterp\fR - A pointer to the interpreter to add the commands to.
.RE
.PP
Returns:
.RS 2
\fBTCL_OK\fR if all is ok, \fBTCL_ERROR\fR if an error occurred.
.RE
'
.SS TclX_Main
.PP
This function parses the command line according to the TclX shell
specification (Unix shell compatible).
It creates an interpreter and calls the specified function \fBappInitProc\fR
to initialize any application specific commands.
It then either evaluates the command of script specified on the command line
or enters an interactive command loop.
This procedure never returns, it exits the process when it's done.  Using
the TclX shell also gives you SIGINT handling in interactive shells.
'
.SS "Tkx_Init"
.PP
Initializes Extended Tcl Tk environment.
This is called from \fBTcl_AppInit\fR after the \fBTk_Init\fR function.
.PP
Parameters
.RS 2
\fBo \fIinterp\fR - A pointer to the interpreter to add the commands to.
.RE
.PP
Returns:
.RS 2
\fBTCL_OK\fR if all is ok, \fBTCL_ERROR\fR if an error occurred.
.RE
'
.SS TkX_Main
.PP
This function parses the command line according to the wish shell
specification.
It creates an interpreter and calls the specified function \fBappInitProc\fR
to initialize any application specific commands.
It then either evaluates the command of script specified on the command line
or enters an interactive command loop.
This procedure never returns, it exits the process when it's done.  Using
the TclX wish shell gives you SIGINT handling in interactive shells,
otherwise it is identical to standard wish.
'
.SH "INTEGRATING TCLX WITH OTHER EXTENSIONS AND APPLICATIONS"
.PP
The main aspects to integrating TclX with into an application is to
decide if the application is based on the standard Tcl/Tk shells or the
TclX shells.  If the standard shells are desired, then all that is
necessary is to call \fBTclx_Init\fR after \fBTcl_Init\fR and 
 \fBTkx_Init\fR after \fBTk_Init\fR.  This functionallity may also be 
dynamically loaded.
.PP
To get the TclX shell in a Tcl only application, with the \fBtcl\fR command
functionallity, call \fBTclX_Main\fR from the \fBmain\fR function instead of
\fBTcl_Main\fR.
This shell has arguments conforming to other Unix shells and SIGINT signal
handling when interactive,.
.PP
To get the Tclx shell in a Tk application, with the \fBwishx\fR command
functionallity, call \fBTkX_Main\fR from the \fBmain\fR function instead of
\fBTk_Main\fR.
This shell has SIGINT signal handling when interactive,
